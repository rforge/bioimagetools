wf[(cx[1]-cf[1]):(cx[1]+cf[1]),(cx[2]-cf[2]):(cx[2]+cf[2])] = filter
wf = fft(wf)
## convert to a frame-based 3D array
dim(x) = c(dx[1:2],prod(dx)/prod(dx[1:2]))
index1 = c(cx[1]:dx[1],1:(cx[1]-1))
index2 = c(cx[2]:dx[2],1:(cx[2]-1))
pdx = prod(dim(x)[1:2])
y = apply(x, 3, function(xx) {
dim(xx) = dx[1:2]
Re(fft(fft(xx)*wf, inverse=TRUE)/pdx)[index1, index2]
})
dim(y) = dx
## convert it back
return(y)
}
prot1<-filterImage2d(prot,brush)
dim(prot1)
image(prot1[,,25])
apply(prot1,3,mean)
apply(prot,3,mean)
file
prot<-readTIF(paste("green/",file,sep=""))
plot(density(prot))
pm<-median(prot)
prot[mask==0]<-pm
plot(density(prot))
sum(mask)
mask<-readTIF(paste("dapimask/",file,sep=""))
install.packages("~/software/bioimagetools/pkg/nucim_0.1.tar.gz", repos = NULL, type = "source")
library(nucim)
?split.channels
f<-"~/projects/marion/C2C12"
N<-7
split.channels(f,cores=3)
f<-"~/projects/marion/C2C12_some"
split.channels(f,cores=6)
split.channels(f)
list.files(f)
list.files(f/rgb)
list.files(paste0(f,"/rgb")
)
split.channels(f)
split.channels.file(file=file)
find.mode<-function(x)
{
d<-density(x)
return(d$x[which(d$y==max(d$y))[1]])
}
split.channels.file<-function(file)
{
print(file)
img<-readTIF(paste("rgb",file,sep="/"))
img<-img-min(img)
img<-img/(max(img))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
red<-red-find.mode(red)
green<-green-find.mode(green)
blue<-blue-find.mode(blue)
red[red<0]<-0
green[green<0]<-0
blue[blue<0]<-0
writeTIF(blue,paste("blue/",file,sep=""),bps=16L)
writeTIF(green,paste("green/",file,sep=""),bps=16L)
writeTIF(red,paste("red/",file,sep=""),bps=16L)
}
split.channels<-function(f,cores=1)
{
orig<-getwd()
setwd(f)
require(bioimagetools)
if(cores>1)
{
require(parallel)
options("mc.cores"=cores)
}
files<-list.files("/rgb")
print(paste(length(files),"files.")))
if(length(list.files("red"))==0)dir.create("red")
if(length(list.files("blue"))==0)dir.create("blue")
if(length(list.files("green"))==0)dir.create("green")
if(cores>1)jobs <- mclapply(files,split.channels.file)
if(cores==1)jobs <- lapply(files,split.channels.file)
XYZ.mic(f,cores=cores)
setwd(orig)
}
split.channels<-function(f,cores=1)
{
orig<-getwd()
setwd(f)
require(bioimagetools)
if(cores>1)
{
require(parallel)
options("mc.cores"=cores)
}
files<-list.files("/rgb")
print(paste(length(files),"files.")))
if(length(list.files("red"))==0)dir.create("red")
if(length(list.files("blue"))==0)dir.create("blue")
if(length(list.files("green"))==0)dir.create("green")
if(cores>1)jobs <- mclapply(files,split.channels.file)
if(cores==1)jobs <- lapply(files,split.channels.file)
XYZ.mic(f,cores=cores)
setwd(orig)
}
split.channels<-function(f,cores=1)
{
orig<-getwd()
setwd(f)
require(bioimagetools)
if(cores>1)
{
require(parallel)
options("mc.cores"=cores)
}
files<-list.files("/rgb")
print(paste(length(files),"files."))
if(length(list.files("red"))==0)dir.create("red")
if(length(list.files("blue"))==0)dir.create("blue")
if(length(list.files("green"))==0)dir.create("green")
if(cores>1)jobs <- mclapply(files,split.channels.file)
if(cores==1)jobs <- lapply(files,split.channels.file)
XYZ.mic(f,cores=cores)
setwd(orig)
}
split.channels(f)
find.mode<-function(x)
{
d<-density(x)
return(d$x[which(d$y==max(d$y))[1]])
}
split.channels.file<-function(file)
{
print(file)
img<-readTIF(paste("rgb",file,sep="/"))
img<-img-min(img)
img<-img/(max(img))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
red<-red-find.mode(red)
green<-green-find.mode(green)
blue<-blue-find.mode(blue)
red[red<0]<-0
green[green<0]<-0
blue[blue<0]<-0
writeTIF(blue,paste("blue/",file,sep=""),bps=16L)
writeTIF(green,paste("green/",file,sep=""),bps=16L)
writeTIF(red,paste("red/",file,sep=""),bps=16L)
}
split.channels<-function(f,cores=1)
{
orig<-getwd()
setwd(f)
require(bioimagetools)
if(cores>1)
{
require(parallel)
options("mc.cores"=cores)
}
files<-list.files("/rgb")
print(paste(length(files),"files."))
if(length(list.files("red"))==0)dir.create("red")
if(length(list.files("blue"))==0)dir.create("blue")
if(length(list.files("green"))==0)dir.create("green")
if(cores>1)jobs <- mclapply(files,split.channels.file)
if(cores==1)jobs <- lapply(files,split.channels.file)
XYZ.mic(f,cores=cores)
setwd(orig)
}
setwd(f)
f
f<-"/home/schmid/projects/marion/C2C12some"
split.channels(f)
f<-"/home/schmid/projects/marion/C2C12some/"
split.channels(f)
setwd("f")
setwd(f)
list.files
list.files()
list.files("rgb")
find.mode<-function(x)
{
d<-density(x)
return(d$x[which(d$y==max(d$y))[1]])
}
split.channels.file<-function(file)
{
print(file)
img<-readTIF(paste("rgb",file,sep="/"))
img<-img-min(img)
img<-img/(max(img))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
red<-red-find.mode(red)
green<-green-find.mode(green)
blue<-blue-find.mode(blue)
red[red<0]<-0
green[green<0]<-0
blue[blue<0]<-0
writeTIF(blue,paste("blue/",file,sep=""),bps=16L)
writeTIF(green,paste("green/",file,sep=""),bps=16L)
writeTIF(red,paste("red/",file,sep=""),bps=16L)
}
split.channels<-function(f,cores=1)
{
orig<-getwd()
setwd(f)
require(bioimagetools)
if(cores>1)
{
require(parallel)
options("mc.cores"=cores)
}
files<-list.files("rgb")
print(paste(length(files),"files."))
if(length(list.files("red"))==0)dir.create("red")
if(length(list.files("blue"))==0)dir.create("blue")
if(length(list.files("green"))==0)dir.create("green")
if(cores>1)jobs <- mclapply(files,split.channels.file)
if(cores==1)jobs <- lapply(files,split.channels.file)
XYZ.mic(f,cores=cores)
setwd(orig)
}
split.channels(f)
dapimask(f,cores=4)
warnings()
gc()
split.channels(f)
warnings()
gc()
q()
setwd("/home/schmid/projects/marion/C2C12some")
files<-sample(list.files("green"))
file<-files[1]
print(file)
mask<-readTIF(paste("dapimask/",file,sep=""))
blau<-readTIF(paste("blue/",file,sep=""))
prot<-readTIF(paste("green/",file,sep=""))
pm<-median(prot)
prot[mask==0]<-pm
#   prot<-prot*2^16
#    storage.mode(prot)<-"integer"
prot0<-prot*blau
brush<-makeBrush(25,shape="gaussian",sigma=3)
prot1<-filterImage2d(prot0,brush)
library(bioimagetools)
setwd("/home/schmid/projects/marion/C2C12some")
files<-sample(list.files("green"))
file<-files[1]
print(file)
mask<-readTIF(paste("dapimask/",file,sep=""))
blau<-readTIF(paste("blue/",file,sep=""))
prot<-readTIF(paste("green/",file,sep=""))
pm<-median(prot)
prot[mask==0]<-pm
#   prot<-prot*2^16
#    storage.mode(prot)<-"integer"
prot0<-prot*blau
brush<-makeBrush(25,shape="gaussian",sigma=3)
prot1<-filterImage2d(prot0,brush)
image(prot1[,,14])
image(prot[,,14])
image(blau[,,14])
dim(blau)
image(blau[,,30])
file<-files[2]
mask<-readTIF(paste("dapimask/",file,sep=""))
blau<-readTIF(paste("blue/",file,sep=""))
prot<-readTIF(paste("green/",file,sep=""))
pm<-median(prot)
prot[mask==0]<-pm
#   prot<-prot*2^16
#    storage.mode(prot)<-"integer"
prot0<-prot*blau
brush<-makeBrush(25,shape="gaussian",sigma=3)
prot1<-filterImage2d(prot0,brush)
image(prot1[,,14])
prot1<-prot1-min(prot1)
prot1<-prot1/max(prot1)
prot13<-ifelse(prot1>.4,1,0)
prot14<-erode(prot13)
image(prot14[,,14])
writeTIF(prot14,paste0(file,"xi.tif"))
prot0<-2*prot+blau
brush<-makeBrush(25,shape="gaussian",sigma=3)
prot1<-filterImage2d(prot0,brush)
image(prot1[,,14])
plot(denstiy(prot1))
plot(density(as.vector(prot1))
)
pp<-prot1
pp[pp<.05]<-NA
plot(density(pp,na.rm=TRUE))
plot(density(pp/max(pp,na.rm=TRUE),na.rm=TRUE))
image(prot1[,,14]>.5)
prot1<-prot1-min(prot1)
prot1<-prot1/max(prot1)
image(prot1[,,14]>.5)
prot0<-2*prot+blau
brush<-makeBrush(25,shape="gaussian",sigma=3)
prot1<-filterImage2d(prot0,brush)
prot1<-prot1-min(prot1)
prot1<-prot1/max(prot1)
prot13<-ifelse(prot1>.5,1,0)
image(prot13[,,14])
prot0<-2*prot+blau
image(prot[,,14])
image(blau[,,14])
image(prot0[,,14])
image(blau[,,14])
image(prot[,,14]-blau[,,14])
brush<-makeBrush(25,shape="gaussian",sigma=3)
prot1<-filterImage2d(prot,brush)
prot1<-prot1-min(prot1)
prot1<-prot1/max(prot1)
prot13<-ifelse(prot1>.5,1,0)
prot14<-erode(prot13)
prot4<-bwlabel3d(prot13)
image(prot13[,,14])
source('~/software/bioimagetools/pkg/nucim/R/smallmask.R')
library(nucim)
mask.small
source('~/software/bioimagetools/pkg/nucim/R/rgb-split.R')
split.channels(f)
f
f<-"/home/schmid/projects/marion/C2C12"
split.channels(f)
f<-"/home/schmid/projects/marion/C2C12some"
split.channels(f,2)
dapimasks(f,2)
source('~/software/bioimagetools/pkg/nucim/R/dapimask.R')
dapimask(f,2)
orig<-getwd()
setwd(f)
require(bioimagetools)
if(cores>1)
{
require(parallel)
options("mc.cores"=cores)
}
files<-list.files("rgb")
files
file<-files[1]
img<-readTIF(paste("rgb",file,sep="/"))
img<-img-min(img)
img<-img/(max(img))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
dim(blue)
range(blue)
#red<-red-find.mode(red)
#green<-green-find.mode(green)
#blue<-blue-find.mode(blue)
red[red<0]<-0
red<-red-find.mode(red)
green<-green-find.mode(green)
blue<-blue-find.mode(blue)
red[red<0]<-0
green[green<0]<-0
blue[blue<0]<-0
writeTIF(blue,paste("blue/",file,sep=""),bps=16L)
writeTIF(green,paste("green/",file,sep=""),bps=16L)
writeTIF(red,paste("red/",file,sep=""),bps=16L)
Xmic<-attr(img,"x.resolution")
Ymic<-attr(img,"y.resolution")
Zmic<-as.numeric(attr(img,"slices"))*as.numeric(attr(img,"spacing"))
write(c(Xmic,Ymic,Zmic),file=paste("XYZmic/",file,".txt",sep=""))
remove(img,red,green,blue)
gc(verbose=FALSE)
},silent=TRUE)
if(class(test)=="try-error")cat(paste0(file,": ",attr(test,"condition"),"\n"))
else(cat(paste0(file," OK\n")))
f
f<-"/home/schmid/projects/marion/C2C12some/"
orig<-getwd()
setwd(f)
require(bioimagetools)
if(cores>1)
{
require(parallel)
options("mc.cores"=cores)
}
files<-list.files("rgb")
file<-files[1]
img<-readTIF(paste("rgb",file,sep="/"))
img<-img-min(img)
img<-img/(max(img))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
dim(blue)
apply(blue,3,mean)
red<-red-find.mode(red)
green<-green-find.mode(green)
min(blue)
image(blue[,,1],zlim=c(0,1))
image(blue[,,10],zlim=c(0,1))
writeTIF(blue,paste("blue/",file,sep=""),bps=16L)
writeTIF
f
file
files
file<-files[2]
mask<-readTIF(paste("dapimask/",file,sep=""))
prot<-readTIF(paste0(color,"/",file))
XYZ <- scan(paste0("XYZmic/",file,".txt"))
color=green""
color="green"
XYZ
prot<-readTIF(paste0(color,"/",file))
xyzmic<-XYZ/dim(mask)
xyzmic
xymic<-mean(xyzmic[1:2])
xymic
?makeBruch
?makeBrush
library(bioimagetools)
?makeBrush
makeBrush
library(EBImage)
?makeBrush
0.048/3
0.016/xymic
0.048*3
.144/xymic
brush<-makeBrush(10,shape="gaussian",sigma=.15/xymic)
brush<-makeBrush(11,shape="gaussian",sigma=.15/xymic)
brush<-makeBrush(25,shape="gaussian",sigma=.15/xymic)
prot1<-filterImage2d(prot,brush)
image(prot1[,,25])
brush<-makeBrush(25,shape="gaussian",sigma=.1/xymic)
prot1<-filterImage2d(prot,brush)
image(prot1[,,25])
f<-"/home/schmid/projects/marion/C2C12some"
library(nucim)
mask.small(f,2,2)
mask.small(f,"green",2,2)
x
source('~/.active-rstudio-document')
mask.small(f,"green",2,2)
source('~/software/bioimagetools/pkg/nucim/R/smallmask.R')
mask.small(f,"green",2)
erode
dilute
dilate
detach("package:EBImage", unload=TRUE)
detach("package:datasets", unload=TRUE)
source('~/software/bioimagetools/pkg/nucim/R/smallmask.R')
mask.small(f,"green",2)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
library(nucim)
