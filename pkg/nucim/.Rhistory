xx[808-27]
xx[808:(808:30)]
xx[808:(808-30)]
round(xx[808:(808-30)],4
)
plot(xx[(808-30):808])
plot(xx[(808:(808-30)])
plot(xx[(808:(808-30))])
.find.first.mode<-function(x)
{
s<-sd(diff(x))
i<-1
go<-TRUE
while(go)
{
i<-i+1
if(x[i]-x[i-1]<(-1.96*s))go<-FALSE
}
print(i)
return(x[i])
}
.find.first.mode(rev(xx))
locator()
.find.first.mode(xx)
.find.first.mode<-function(x)
{
s<-sd(diff(x))
i<-1
go<-TRUE
while(go)
{
i<-i+1
if(x[i]-x[i-1]<(-1.96*s))go<-FALSE
}
return(x[i-1])
}
thresh<-c(.find.first.mode(xx),.find.first.mode(rev(xx)),.find.first.mode(yy),.find.first.mode(rev(yy)))
thresh
plot(thresh)
median(thresh)
b<-blau>median(thresh)
image(b[,,20])
mean(blau)
mean(blau)-median(thresh)
b<-blau>median(thresh/2)
image(b[,,20])
source('~/software/bioimagetools/pkg/nucim/R/dapimask.R')
dapimask(f,2)
file
blau<-readTIF(paste("blueorig/",file,sep=""))
mb<-apply(blau,3,mean)
mbr<-0.3*sum(range(mb))
mbr<-which(mbr<mb)
small<-min(mbr):max(mbr)
dims0<-dim(blau)
blau<-blau[,,small]
dims<-dim(blau)
blau<-blau-median(blau)
blau[blau<0]<-0
blau<-array(blau,dims)
blau<-blau/max(blau)
blau<-filterImage3d(blau,"var",4,1/3,silent=TRUE)
XYZ <- scan(paste0("XYZmic/",file,".txt"))
xyzmic<-XYZ/dim(mask)
xymic<-mean(xyzmic[1:2])
brush<-makeBrush(25,shape="gaussian",sigma=.1/xymic)
blau2<-filterImage2d(blau,brush)
xx<-apply(blau,1,mean)
yy<-apply(blau,2,mean)
thresh<-c(.find.first.mode(xx),.find.first.mode(rev(xx)),.find.first.mode(yy),.find.first.mode(rev(yy)))
b<-blau>median(thresh/2)
#b<-blau>quantile(blau,.8)
b2<-array(0,dims0)
b2[,,small]<-array(as.integer(b),dim(b))
n<-5
mask<-1-outside(b2,0,n)
brush<-makeBrush(2*n-1,shape='box')
mask<-erode(mask,brush)
mask0<-bwlabel3d(mask,silent=TRUE)
mask1<-cmoments3d(mask0,mask)
which<-rev(order(mask1[,5]))[1]
mask<-ifelse(mask0==which,1,0)
if(0)
{
z<-25
bb<-mask[,,z]-.5
bb<-bb*blau[,,z]
image(bb)
}
mask<-fillHull(mask)
#mask0<-1-outside(b,0,15)
#mask<-array(0,dims0)
#mask[,,small]<-array(as.integer(mask0),dim(mask0))
writeTIF(mask,paste("dapimask/",file,sep=""),bps=8)
detach("package:EBImage", unload=TRUE)
remove(list=ls())
setwd("~/Desktop/processed_segmentation_BJ1/cell01_BI1_HM1/test_26_09")
file<-list.files("blueorig/")
file
blau<-readTIF(paste("blueorig/",file,sep=""))
mb<-apply(blau,3,mean)
mbr<-0.3*sum(range(mb))
mbr<-which(mbr<mb)
small<-min(mbr):max(mbr)
dims0<-dim(blau)
blau<-blau[,,small]
dims<-dim(blau)
blau<-blau-median(blau)
blau[blau<0]<-0
blau<-array(blau,dims)
blau<-blau/max(blau)
blau<-filterImage3d(blau,"var",4,1/3,silent=TRUE)
XYZ <- scan(paste0("XYZmic/",file,".txt"))
xyzmic<-XYZ/dim(mask)
xymic<-mean(xyzmic[1:2])
brush<-makeBrush(25,shape="gaussian",sigma=.1/xymic)
blau2<-filterImage2d(blau,brush)
xx<-apply(blau,1,mean)
yy<-apply(blau,2,mean)
thresh<-c(.find.first.mode(xx),.find.first.mode(rev(xx)),.find.first.mode(yy),.find.first.mode(rev(yy)))
b<-blau>median(thresh/2)
#b<-blau>quantile(blau,.8)
b2<-array(0,dims0)
b2[,,small]<-array(as.integer(b),dim(b))
n<-5
mask<-1-outside(b2,0,n)
brush<-makeBrush(2*n-1,shape='box')
mask<-erode(mask,brush)
mask0<-bwlabel3d(mask,silent=TRUE)
xyzmic<-XYZ/dim(blau)
xymic<-mean(xyzmic[1:2])
brush<-makeBrush(25,shape="gaussian",sigma=.1/xymic)
blau2<-filterImage2d(blau,brush)
xx<-apply(blau2,1,mean)
yy<-apply(blau2,2,mean)
thresh<-c(.find.first.mode(xx),.find.first.mode(rev(xx)),.find.first.mode(yy),.find.first.mode(rev(yy)))
b<-blau>median(thresh/2)
#b<-blau>quantile(blau,.8)
b2<-array(0,dims0)
b2[,,small]<-array(as.integer(b),dim(b))
n<-5
mask<-1-outside(b2,0,n)
brush<-makeBrush(2*n-1,shape='box')
mask<-erode(mask,brush)
image(b2[,,10])
image(b2[,,11])
image(b2[,,1])
image(b2[,,2])
image(b2[,,3])
thresh
image(blau2)
image(blau[,,1])
image(blau[,,2])
image(blau2[,,1])
image(b[,,1])
image(b[,,2])
image(b[,,3])
image(b[,,4])
image(b[,,5])
image(b[,,4])
image.plot(blau[,,1])
image.plot(blau[,,2])
blau[1,1,1]
median(thresh)
mean(blau)
blau<-readTIF(paste("blue/",file,sep=""))
mb<-apply(blau,3,mean)
mbr<-0.3*sum(range(mb))
mbr<-which(mbr<mb)
small<-min(mbr):max(mbr)
dims0<-dim(blau)
blau<-blau[,,small]
dims<-dim(blau)
blau<-blau-median(blau)
blau[blau<0]<-0
blau<-array(blau,dims)
blau<-blau/max(blau)
blau<-filterImage3d(blau,"var",4,1/3,silent=TRUE)
image(blau[,,1])
blau[1,1,1]
blau<-readTIF(paste("blue/",file,sep=""))
image(blau[1,1,1])
image(blau[,,1])
blau[1,1,1]
library(nucim)
f<-"/home//schmid/Desktop//processed_segmentation_BJ1/test_VS/"
split.channels(f,2)
source('~/software/bioimagetools/pkg/nucim/R/rgb-split.R')
split.channels(f,2)
f
setwd(f)
file<-list.files("rgb")
img<-readTIF(paste("rgb",file,sep="/"))
img<-img-min(img)
img<-readTIF(paste("rgb",file,sep="/"))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
red<-red-find.mode(red)
green<-green-find.mode(green)
bluecut<-blue-find.mode(blue)
plot(density(red))
plot(density(bluecut))
red[red<0]<-0
green[green<0]<-0
plot(density(red))
bluecut[bluecut<0]<-0
plot(density(bluecut))
red<-red-min(red)
green<-green-min(green)
bluecut<-bluecut-min(bluecut)
blue<-blue-min(blue)
plot(density(blue))
image(blue[,,1])
library(fields)
image.plot(blue[,,1])
image.plot(blue[,,2])
image.plot(blue[,,3])
image.plot(blue[,,4])
image.plot(blue[,,1],zlim=c(0,1))
image.plot(blue[,,2],zlim=c(0,1))
red<-red/max(red)
green<-green/max(green)
blue<-blue/max(blue)
bluecut<-bluecut/max(bluecut)
image.plot(blue[,,2],zlim=c(0,1))
image.plot(blue[,,1],zlim=c(0,1))
image.plot(blue[,,3],zlim=c(0,1))
image.plot(bluecut[,,3],zlim=c(0,1))
writeTIF(bluecut,paste("blue/",file,sep=""),bps=16L)
writeTIF(blue,paste("blueorig/",file,sep=""),bps=16L)
blue[1,1,1]
bluecut[1,1,1]
image.plot(blue[,,1],zlim=c(0,1))
img<-readTIF(paste("rgb",file,sep="/"))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
red<-red-find.mode(red)
green<-green-find.mode(green)
bluecut<-blue-find.mode(blue)
red[red<0]<-0
green[green<0]<-0
bluecut[bluecut<0]<-0
red<-red-min(red)
green<-green-min(green)
bluecut<-bluecut-min(bluecut)
blue<-blue-min(blue)
red<-red/max(red)
green<-green/max(green)
blue<-blue/max(blue)
bluecut<-bluecut/max(bluecut)
blue[1,1,1]
max(blue)
img<-readTIF(paste("rgb",file,sep="/"))
D<-length(dim(img))
if (D==4)
{
red<-img[,,1,]
green<-img[,,2,]
blue<-img[,,3,]
}
if (D==3)
{
Z<-dim(img)[3]
red<-img[,,seq(1,Z,by=3)]
green<-img[,,seq(2,Z,by=3)]
blue<-img[,,seq(3,Z,by=3)]
}
red<-red-find.mode(red)
blue[1,1,1]
green<-green-find.mode(green)
bluecut<-blue-find.mode(blue)
blue[1,1,1]
bluecut[1,1,1]
red[red<0]<-0
green[green<0]<-0
bluecut[bluecut<0]<-0
blue[1,1,1]
bluecur[1,1,1]
bluecut[1,1,1]
red<-red-min(red)
green<-green-min(green)
bluecut<-bluecut-min(bluecut)
blue<-blue-min(blue)
blue[1,1,1]
bluecut[1,1,1]
max(blue)
plot(apply(blue,3,mean))
red<-red/max(red)
green<-green/max(green)
blue<-blue/max(blue)
bluecut<-bluecut/max(bluecut)
plot(apply(blue,3,mean))
image.plot(blue[,,1])
image.plot(blue[,,2])
image.plot(blue[,,3])
image.plot(blue[,,4])
image.plot(blue[,,1],zlim=c(0,1))
image.plot(blue[,,4],zlim=c(0,1))
image.plot(blue[,,14],zlim=c(0,1))
image.plot(blue[,,20],zlim=c(0,1))
max(blue)
min(blue)
blue[1,1,1]
plot(apply(blue,3,mean))
plot(apply(blue,2,mean))
plot(apply(blue,1,mean))
writeTIF(bluecut,paste("blue/",file,sep=""),bps=16L)
writeTIF(blue,paste("blueorig/",file,sep=""),bps=16L)
writeTIF(green,paste("green/",file,sep=""),bps=16L)
writeTIF(red,paste("red/",file,sep=""),bps=16L)
test<-readTIF("blueorig//HM1BJ_001_SIR_ALX.dv_comp.tif")
plot(apply(blue,3,tif))
plot(apply(blue,3,mean))
lines(apply(test,3,mean))
plot(apply(test,3,mean))
writeTIF
img<-blau
require(tiff)
if (is.null(bps))
if (!is.null(attr$bits.per.sample))
bps <- attr$bits.per.sample
if (is.null(bps))
bps <- 8L
bps=8L
bps=16L
imglist <- list()
if (length(dim(img)) == 3) {
Z <- dim(img)[3]
for (i in 1:Z) imglist[[i]] <- img[, , i]/max(img[, ,
i])
}
library(nucim)
remove(list=ls())
save.image()
library(nucim)
f<-"/home//schmid/Desktop//processed_segmentation_BJ1/test_VS/"
split.channels(f,2)
dapimask(f,2)
split.channels(f,2)
writeTIF
?writeTIFF
dapimask(f,2)
source('~/software/bioimagetools/pkg/nucim/R/dapimask.R')
dapimask(f,2)
library(nucim)
colors.in.classes
?colors.in.classes
colors.in.classes
f
library(nucim)
f<-"/home//schmid/Desktop//processed_segmentation_BJ1/test_VS/"
orig<-getwd()
setwd(f)
library(bioimagetools)
if (cores>1)
{
library(parallel)
options("mc.cores"=cores)
}
cores=3
library(parallel)
options("mc.cores"=cores)
files<-sample(list.files(paste0("class",N))
)
files
N<-7
files<-sample(list.files(paste0("class",N)))
cat(paste(length(files),"files.\n"))
files<-sample(list.files(paste0("class",N)))
files<-list.files(paste0("class",N))
files
file=files
if(length(list.files(paste0("colors.classes",N)))==0)dir.create(paste0("colors.classes",N))
mask<-readTIF(paste("dapimask/",file,sep=""))
blau<-readTIF(paste("class",N,"/"file,sep=""))
blau<-readTIF(paste("class",N,"/",file,sep=""))
blau<-round(blau*N)
max(blau)
storage.mode(blau)<-"integer"
dored<-dogreen<-FALSE
dored<-dogreen<-TRUE
if(dored)red<-readTIF(paste("red/",file,sep=""))
if(dogreen)green<-readTIF(paste("green/",file,sep=""))
if (dored&!dogreen)cic<-colors.in.classes(blau,red,mask=mask,N=N)
if (!dored&dogreen)cic<-colors.in.classes(blau,green,mask=mask,N=N)
if (dored&dogreen)cic<-colors.in.classes(blau,green,red,mask=mask,N=N)
cic
colors.in.classes
if (dored&dogreen)cic<-colors.in.classes(blau,green,red,mask=mask,N=N,plot=FALSE)
cic
cic<-colors.in.classes(blau,red,mask=mask,N=N)
dored
dogreen
cic
cic<-colors.in.classes(blau,green,red,mask=mask,N=N,plot=FALSE)
cic
colors.in.classes
cic<-colors.in.classes(blau,green,red,mask=mask,N=N,plot=FALSE,test=TRUE)
cic<-colors.in.classes(blau,green,red,mask=mask,N=N,plot=TRUE,test=TRUE)
cic
cic
cic$test1$p.value
cic$test2$p.value
cic$test12$p.value
source('~/software/bioimagetools/pkg/nucim/R/colors-classes.R')
f
colors.classes(f,7,cores=3)
color="red,green"
colors.classes(f,7,cores=3)
colors.classes.file(f,7)
file
file
colors.classes.file(file,7)
source('~/software/bioimagetools/pkg/nucim/R/colors-classes.R')
getwd()
f<-"/home//schmid/Desktop/processed_segmentation_BJ1/test_VS/"
colors.classes(f,7,cores=3)
setwd(f)
files<-list.files("blue")
colors.classes.file(files[1],7)
source('~/software/bioimagetools/pkg/nucim/R/colors-classes.R')
colors.classes(f,7,cores=3)
dev.off()
dev.off()
dev.off()
source('~/software/bioimagetools/pkg/nucim/R/colors-classes.R')
colors.classes(f,7,cores=3)
f
colors.classes(f,7,cores=3)
f
N
N<-7
orig<-getwd()
setwd(f)
library(bioimagetools)
if (cores>1)
{
library(parallel)
options("mc.cores"=cores)
}
files<-list.files(paste0("class",N))
cat(paste(length(files),"files.\n"))
if(length(list.files(paste0("colors.classes",N)))==0)dir.create(paste0("colors.classes",N))
if(length(list.files("redmask")==0))dir.create("redmask")
list.files("redmask")
length(list.files("redmask"))
source('~/.active-rstudio-document')
source('~/software/bioimagetools/pkg/nucim/R/colors-classes.R')
colors.classes(f,7,cores=3)
f
color1<-readTIF("red/HM1BJ_001_SIR_ALX.dv_comp.tif")
classes<-readTIF("class7/HM1BJ_001_SIR_ALX.dv_comp.tif")
classes<-array(classes,dim(classes))
color1<-array(color1,dim(color1))
mask<-readTIF("dapimask/HM1BJ_001_SIR_ALX.dv_comp.tif")
mask<-array(mask==1,dim(mask))
classes<-classes[mask]
color1<-color1[mask]
if(is.null(thresh1))thresh1<-mean(color1)+sd1*sd(color1)
thresh1=NULL
if(is.null(thresh1))thresh1<-mean(color1)+sd1*sd(color1)
sd1=2
if(is.null(thresh1))thresh1<-mean(color1)+sd1*sd(color1)
image(color1)
color1<-array(color1,dim(color1))
color1<-readTIF("red/HM1BJ_001_SIR_ALX.dv_comp.tif")
dim(color1)
image(color1[,,13]>thresh)
image(color1[,,13]>thresh1)
plot(density(color1))
mean(color1)
median(color1)
thresh1
sd(color1)
??file
file.access("redmask/HM1BJ_001_SIR_ALX.dv_comp.tif")
file.access("redmask/HM1BJ_001_SIR_ALX.dv.tif")
source('~/software/bioimagetools/pkg/nucim/R/colors-classes.R')
source('~/software/bioimagetools/pkg/nucim/R/colors-classes.R')
colors.classes(f,7,cores=3)
library(nucim)
install.packages("plyr")
install.packages("yaml")
install.packages("ggplot2")
update.packages()
?packageStartupMessage
library(nucim)
library(bioimagetools)
