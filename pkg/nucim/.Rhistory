library(bioimagetools)
?readTIFF
?readTIF
readTIF
?file.choose
?file.choose
file.choose()
??folder
getwd()
list.files()
list.files("nucim.Rproj")
list.files("nucim.Rproj")->files
length(files)
??dir
??directory
source('~/.active-rstudio-document')
source('~/software/bioimagetools/pkg/nucim/R/dapimask.R')
source('~/software/bioimagetools/pkg/nucim/R/XYZmic.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(nucim)
f<-"~/projects/marion/Sep17"
split.channels(f)
split.channels(f)
library(nucim)
do
library(nucim)
colors.classes
library(nucim)
setwd("~/projects/marion/from_lothar")
img<-readTIF("k4_k7_013_cropped-bgr.tif")
library(nucim)
library(bioimagetools)
img<-readTIF("k4_k7_013_cropped-bgr.tif")
img<-split.channel(img)
mask<-mask.dapi(img$blue)
img$mic
dim(mask)
source('~/.active-rstudio-document')
mask<-mask.dapi(img$blue,img$mic)
source('~/.active-rstudio-document')
mask<-mask.dapi(img$blue,img$mic)
dim(mask)
dim(img)
dim(img$blue)
segment.classes(rgb$blue,mask,N=7)
source('/media/bioimg/software/bioimagetools/pkg/nucim/R/segment_classes.R')
segment.classes(rgb$blue,mask,N=7)
rgb<-split.channel(img)
0
rgb<-split.channel(img)
img<-readTIF("k4_k7_013_cropped-bgr.tif")
rgb<-split.channel(img)
segment.classes(rgb$blue,mask,N=7)
classes<-segment.classes(rgb$blue,mask,N=7)
#
image(classes[,,20])
image(mask[,,20])
image(classes[,,20])
classes[1,1,20]
max(classes)
dim(classes)
library(fields)
image.plot(1:484,1:475,classes[,,20])
classes.table<-table(as.vector(classes[classes>0]))
barplot(classes.table)
segment.classes
points.red <- read.csv("H3K4me3.csv")
points.green <- read.csv("H3K27me3.csv")
points.red <- read.csv("H3K4me3.csv")
summary(points.green)
dim(points.green)
points.red <- read.csv("H3K4me3.csv")[,7:9]
summary(points.green)
points.green <- read.csv("H3K27me3.csv")[,7:9]
summary(points.green)
dimdim(red)
dim(points.green)
.tp<-function(point,classes)
{
return(classes[point[1],point[2],point[3]])
}
source('~/.active-rstudio-document')
classes.red<-table.points(classes,red,mic=FALSE,mask=mask)
classes.red<-table.points(classes,rgb$red,mic=FALSE,mask=mask)
blue<-rgb$blue
red<-rgb$red
green<-rgb$green
classes.red<-table.points(classes,red,mic=FALSE,mask=mask)
color=red
mic==FALSE
mic=FALSE
if(!(mic==FALSE))
{
color[,1]<-color[,1]/mic[1]*dim(color)[1]
color[,2]<-color[,2]/mic[2]*dim(color)[2]
color[,3]<-color[,3]/mic[3]*dim(color)[3]
}
.tp<-function(point,classes,mask)
{
if(mask[point[1],point[2],point[3]])return(classes[point[1],point[2],point[3]])
else{return(NA)}
}
if(require(parallel))points<-apply(color,1,.tp,classes,mask)
dim(mask)
.tp<-function(point,classes,mask)
{
print(point)
if(mask[point[1],point[2],point[3]])return(classes[point[1],point[2],point[3]])
else{return(NA)}
}
if(require(parallel))points<-apply(color,1,.tp,classes,mask)
if(require(parallel))points<-apply(color,2,.tp,classes,mask)
dim(color)
color<-points.red
classes.red<-table.points(classes,points.red,mic=FALSE,mask=mask)
classes.red<-table.points(classes,points.red,mic=FALSE,mask=mask)
classes.red
barplot(classes.red)
classes.green<-table.points(classes,points.green,mic=FALSE,mask=mask)
barplot(classes.green)
source('/media/bioimg/software/bioimagetools/pkg/nucim/R/table_points.R')
classes.green<-table.points(classes,points.green,mic=FALSE,mask=mask)
barplot(classes.green)
image(mask[,,20])
classes.green<-table.points(classes,points.green,mic=FALSE,mask=mask)
classes.red<-table.points(classes,points.red,mic=FALSE,mask=mask)
summary(points.red)
dim(mask)
summary(points.green)
dim(mask)
table(as.vector(mask))
source('~/.active-rstudio-document')
classes.green<-table.points(classes,points.green,mic=FALSE,mask=mask)
source('~/.active-rstudio-document')
classes.green<-table.points(classes,points.green,mic=FALSE,mask=mask)
dim(points.red)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
classes.red<-table.points(classes,points.red,mic=FALSE,mask=mask)
barplot(classes.red)
classes.green<-table.points(classes,points.green,mic=FALSE,mask=mask)
barplot(classes.green)
?barplot
barplot(rbind(classes.table,classes.red,classes.green))
barplot(cbind(classes.table,classes.red,classes.green))
barplot(rbind(classes.table,classes.red,classes.green),besides=TRUE)
barplot(rbind(classes.table,classes.red,classes.green),beside=TRUE)
barplot(rbind(classes.table/sum(classes.table),classes.red/sum(classes.red),classes.green/sum(classes.green)),beside=TRUE,col=c("grey","red","green"))
d2b<-distance2border(points.red,classes,Xmic=1,Ymic=1,Zmic=1,class1=1,mask=mask,hist=TRUE)
args(distance2border)
d2b<-distance2border(points.red,classes,1,1,1,class1=1,mask=mask,hist=TRUE)
dim(classes)
points=points.red
img.classes=classes
dims <- dim(img.classes)
X <- dims[1]
Y <- dims[2]
Z <- dims[3]
points.discrete <- data.frame(x = 1 + floor(X * points[,1]/x.microns),
y = 1 + floor(Y * points[,2]/y.microns), z = 1 + floor(Z *
1eQF3Ð²E2}
x.microns<-y.microns<-z.microns
x.microns<-y.microns<-z.microns<-1
points.discrete <- data.frame(x = 1 + floor(X * points[,1]/x.microns),
y = 1 + floor(Y * points[,2]/y.microns), z = 1 + floor(Z *
points[,3]/z.microns))
cat("-")
if(require(parallel))valid<-mclapply(1:dim(points.discrete)[1],bioimagetools..validate,points,points.discrete,mask,img.classes,class1)
valid[[1]]
summary(points.discrete)
source('~/bioimg/software/bioimagetools/pkg/bioimagetools/R/distance2border.R')
d2b<-distance2border(points.red,classes,class1=1,mask=mask,hist=TRUE)
dim(d2b)
summary(dsb)
summary(d2b)
plot(density(d2b))
d2b.red<-d2b
d2b.green<-distance2border(points.green,classes,class1=1,mask=mask)
hist(d2b.green)
hist(d2b.green,n=30)
hist(d2b.red,n=30)
hist(d2b.red,n=100)
hist(d2b.green,n=100)
abstabd<-d2b
xlim=c(-.3,.3)
temp <- hist(abstand[abstand < xlim[2] & abstand > xlim[1]],
breaks = seq(xlim[1], xlim[2], length = n), main = main,
xlab = xlab)
abstand<-d2b.green
temp <- hist(abstand[abstand < xlim[2] & abstand > xlim[1]],
breaks = seq(xlim[1], xlim[2], length = n), main = main,
xlab = xlab)
n=20
temp <- hist(abstand[abstand < xlim[2] & abstand > xlim[1]],
breaks = seq(xlim[1], xlim[2], length = n), main = main,
xlab = xlab)
main=""
temp <- hist(abstand[abstand < xlim[2] & abstand > xlim[1]],
breaks = seq(xlim[1], xlim[2], length = n), main = main,
xlab = xlab)
xlab=""
temp <- hist(abstand[abstand < xlim[2] & abstand > xlim[1]],
breaks = seq(xlim[1], xlim[2], length = n), main = main,
xlab = xlab)
source('~/bioimg/software/bioimagetools/pkg/bioimagetools/R/distance2border.R')
d2b.red<-distance2border(points.red,classes,class1=1,mask=mask,voxel=TRUE)
mic
rgb<-split.channel(img)
mic<-rgb$mic
d2b.red<-distance2border(points.red,classes,mic[1],mic[2],mic[3],class1=1,mask=mask,voxel=TRUE)
plot(density(d2b.red))
hist(d2b.red,n=30)
hist(d2b.red,density=.4,color="red",n=30)
hist(d2b.red,density=40,color="red",n=30)
warnings()
hist(d2b.red,density=40,col="red",n=30)
hist(d2b.green,density=30,col="green",n=30,add=TRUE)
hist(d2b.red,density=40,col="red",n=30,freq=TRUE)
hist(d2b.green,density=30,col="green",n=30,add=TRUE,freq=TRUE)
hist(d2b.green,density=30,col="green",n=30,freq=TRUE)
hist(d2b.red,density=40,col="red",n=30,freq=TRUE,add=TRUE)
d2b.green<-distance2border(points.green,classes,mic[1],mic[2],mic[3],class1=1,mask=mask,voxel=TRUE)
hist(d2b.green,density=30,col="green",n=30,freq=TRUE)
hist(d2b.red,density=40,col="red",n=30,freq=TRUE,add=TRUE)
summary(points.green)
test<-L.cross.3D(points.red[,1],points.red[,2],points.red[,3],points.green[,1],points.green[,2],points.gren[,3],parallel=TRUE)
test<-L.cross.3D(points.red[,1],points.red[,2],points.red[,3],points.green[,1],points.green[,2],points.green[,3],parallel=TRUE)
dim(points.red)
dim(points.green)
test<-L.cross.3D(points.red[,1],points.red[,2],points.red[,3],
points.green[,1],points.green[,2],points.green[,3],
psz=100,parallel=TRUE)
red.sample<-sample(1:dim(points.red)[1],500)
green.sample<-sample(1:dim(points.green)[1],500)
X1<-points.red[red.sample,1]
Y1<-points.red[red.sample,2]
Z1<-points.red[red.sample,3]
X2<-points.green[green.sample,1]
Y2<-points.green[green.sample,2]
Z2<-points.green[green.sample,3]
test<-L.cross.3D(X1,Y1,Z1,X2,Y2,Z2,
psz=100,parallel=TRUE)
test<-K.cross.3D(X1,Y1,Z1,X2,Y2,Z2,
psz=100,parallel=TRUE)
save.image()
getwd()
X<-X1
Y<-Y1
Z<-Z1
width=1
actualwidth=width
width=1.1*width
if(parallel)require(parallel)
N<-length(X)
N2<-length(X2)
width.psz<-floor(width*psz)+1
require(parallel)
parallel=TRUE
psz=25
x<-round(X*psz,0)+width.psz+1
y<-round(Y*psz,0)+width.psz+1
z<-round(Z*psz,0)+width.psz+1
x2<-round(X2*psz,0)+width.psz+1
y2<-round(Y2*psz,0)+width.psz+1
z2<-round(Z2*psz,0)+width.psz+1
width.psz<-floor(width*psz)+1
x<-round(X*psz,0)+width.psz+1
y<-round(Y*psz,0)+width.psz+1
z<-round(Z*psz,0)+width.psz+1
x2<-round(X2*psz,0)+width.psz+1
y2<-round(Y2*psz,0)+width.psz+1
z2<-round(Z2*psz,0)+width.psz+1
ID<-1:N
ID2<-1:N2
if(!is.null(intensity))ID.matrix<-ID.matrix2<-array(NA,c(max(dim(intensity)[1],dim(intensity2)[1])+(2*width.psz+1),max(dim(intensity)[2],dim(intensity2)[2])+(2*width.psz+1),max(dim(intensity)[3],dim(intensity2)[3])+(2*width.psz+1)))
if(is.null(intensity))ID.matrix<-ID.matrix2<-array(NA,c(round(max(c(X,X2))*psz,0)+(2*width.psz+1),round(max(c(Y,Y2))*psz,0)+(2*width.psz+1),round(max(c(Z,Z2))*psz,0)+(2*width.psz+1)))
intensity=NULL
if(is.null(intensity))ID.matrix<-ID.matrix2<-array(NA,c(round(max(c(X,X2))*psz,0)+(2*width.psz+1),round(max(c(Y,Y2))*psz,0)+(2*width.psz+1),round(max(c(Z,Z2))*psz,0)+(2*width.psz+1)))
round(max(c(Z,Z2))*psz,0)+(2*width.psz+1)
c(round(max(c(X,X2))*psz,0)+(2*width.psz+1)
)
X1<-points.red[red.sample,1]/mic[1]
Y1<-points.red[red.sample,2]/mic[2]
Z1<-points.red[red.sample,3]/mic[3]
X2<-points.green[green.sample,1]/mic[1]
Y2<-points.green[green.sample,2]/mic[2]
Z2<-points.green[green.sample,3]/mic[3]
test<-L.cross.3D(X1,Y1,Z1,X2,Y2,Z2,
psz=100,parallel=TRUE)
plot(test)
X1<-points.red[,1]/mic[1]
Y1<-points.red[,2]/mic[2]
Z1<-points.red[,3]/mic[3]
X2<-points.green[,1]/mic[1]
Y2<-points.green[,2]/mic[2]
Z2<-points.green[,3]/mic[3]
test<-L.cross.3D(X1,Y1,Z1,X2,Y2,Z2,
psz=100,parallel=TRUE)
plot(test)
test<-K.cross.3D(X1,Y1,Z1,X2,Y2,Z2,
psz=25,parallel=TRUE)
plot(test)
test<-L.cross.3D(X1,Y1,Z1,X2,Y2,Z2,
psz=25,parallel=TRUE)
plot(test)
test<-L.cross.3D.envelope(X1,Y1,Z1,X2,Y2,Z2,
psz=25,parallel=TRUE)
args(L.cross.3D.envelope)
?L.cross.3D.envelope
?K.cross.3D.envelope
test<-L.cross.3D.envelope(X1,Y1,Z1,X2,Y2,Z2,range=1,bw.int=1,width=1,
psz=25,parallel=TRUE)
plot(test)
q("y")
q("yes")
